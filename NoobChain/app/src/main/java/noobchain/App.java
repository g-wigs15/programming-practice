/*
 * This source file was generated by the Gradle 'init' task
 */
package noobchain;

import java.util.ArrayList;
import com.google.gson.GsonBuilder;

public class App {

    public static ArrayList<Block> blockchain = new ArrayList<Block>();
    public static int difficulty = 5; // Should be changed to a larger number if we want this to be secure enough. Litecoin's dif: 442,592

    public static void main(String[] args) {
		
        System.out.println("------------------------------------------------------------------------------");

        blockchain.add(new Block("Block 1", "0"));
		System.out.println("Trying to Mine block 1... ");
		blockchain.get(0).mineBlock(difficulty);

        System.out.println("------------------------------------------------------------------------------");
		
		blockchain.add(new Block("Block 2",blockchain.get(blockchain.size()-1).hash));
		System.out.println("Trying to Mine block 2... ");
		blockchain.get(1).mineBlock(difficulty);

        System.out.println("------------------------------------------------------------------------------");
		
		blockchain.add(new Block("Block 3",blockchain.get(blockchain.size()-1).hash));
		System.out.println("Trying to Mine block 3... ");
		blockchain.get(2).mineBlock(difficulty);	

        System.out.println("------------------------------------------------------------------------------");
		
		System.out.println("\nBlockchain is Valid: " + isChainValid());
		
		String blockchainJson = new GsonBuilder().setPrettyPrinting().create().toJson(blockchain);
		System.out.println("\nThe block chain: ");
		System.out.println(blockchainJson);
	}

    public static Boolean isChainValid() {
        
        Block currentBlock; 
        Block previousBlock;
        String hashTarget = new String(new char[difficulty]).replace('\0', '0');
        
        // loops through blockchain to check hashes
        for(int i=1; i < blockchain.size(); i++) {
			
            currentBlock = blockchain.get(i);
			previousBlock = blockchain.get(i-1);
			
            //compare registered hash and calculated hash:
			if(!currentBlock.hash.equals(currentBlock.calculateHash()) ){
				
                System.out.println("The Current Hash is !=");			
				return false;
			}
			
            //compare previous hash and registered previous hash
			if(!previousBlock.hash.equals(currentBlock.previousHash) ) {
				
                System.out.println("The Previous Hash is !=");
				return false;
			}
			
            //check if hash is solved
			if(!currentBlock.hash.substring( 0, difficulty).equals(hashTarget)) {
				
                System.out.println("This Current Block has not been Mined");
				return false;
			}
		}
		return true;
    }
}
